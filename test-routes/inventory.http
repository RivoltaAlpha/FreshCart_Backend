@url = http://localhost:8000
@storeToken = eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOjUsImVtYWlsIjoic3RvcmUub3duZXJAZ21haWwuY29tIiwicm9sZSI6IlN0b3JlIiwiaWF0IjoxNzUxNjExMjgxLCJleHAiOjE3NTE2MTQ4ODF9.6nz7Qo8MDTNjOFl2a4J-scZvE0kzaM26AN5MNyQbXOI
@adminToken =eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOjMsImVtYWlsIjoiYWRtaW5AZ21haWwuY29tIiwicm9sZSI6IkFkbWluIiwiaWF0IjoxNzUxNjE2OTcxLCJleHAiOjE3NTE2MjA1NzF9.PVcZjsum9TAyylcVJqTa5iwq0yRZ8Wbb1oXuwj_W4e0
### Variables
@storeId = 1
@productId = 1
@inventoriesId = 1

### ===================== inventories MANAGEMENT =====================

### 1. Create inventories record (if product exists without inventories)
POST {{url}}/inventories/create
Authorization: Bearer {{adminToken}}
Content-Type: application/json

{
  "store_id": 2,
  "stock_qty": 100,
  "reorder_level": 15,
  "quantity_reserved": 0,
  "max_stock_level": 500,
  "cost_price": 85.00,
  "last_action": "restock"
}

### Check what products are available
GET {{url}}/products/all
Authorization: Bearer {{adminToken}}

### all inventories
GET {{url}}/inventories/all?storeId=2
Authorization: Bearer {{adminToken}}

### Check specific product exists
GET {{url}}/products/7
Authorization: Bearer {{adminToken}}

### 3. Get all inventories (Admin only)
GET {{url}}/inventories/all
Authorization: Bearer {{adminToken}}

### add product to inventory
POST {{url}}/inventories/3/products/9
Authorization: Bearer {{adminToken}}

### 4. Get specific inventories record
GET {{url}}/inventories/1
Authorization: Bearer {{storeToken}}

### 5. Get inventories by product
GET {{url}}/inventories/product/2
Authorization: Bearer {{storeToken}}

### 6. Get low stock items for store
GET {{url}}/inventories/low-stock?storeId={{storeId}}
Authorization: Bearer {{storeToken}}

### 7. Get out of stock items
GET {{url}}/inventories/out-of-stock?storeId={{storeId}}
Authorization: Bearer {{storeToken}}


## remove product from inventories
DELETE {{url}}/inventories/{{inventoriesId}}/products/:{{productId}}
Authorization: Bearer {{storeToken}}

### add product to inventories
POST {{url}}/inventories/{{inventoriesId}}/products
Authorization: Bearer {{storeToken}}
Content-Type: application/json

{
  "product_id": 1,
  "stock_qty": 200,
  "reorder_level": 20,
  "max_stock_level": 600,
  "cost_price": 80.00
}

### ===================== STOCK UPDATES =====================

### 8. Restock inventories
PATCH {{url}}/inventories/{{inventoriesId}}/stock
Authorization: Bearer {{storeToken}}
Content-Type: application/json

{
  "quantity_change": 50,
  "action": "restock",
  "cost_price": 90.00,
  "supplier": "Premium Suppliers Ltd",
  "notes": "Weekly restock delivery"
}

### 9. Record sale (reduce stock)
PATCH {{url}}/inventories/{{inventoriesId}}/stock
Authorization: Bearer {{storeToken}}
Content-Type: application/json

{
  "quantity_change": 10,
  "action": "sale",
  "notes": "Sold to customer #12345"
}

### 10. Stock adjustment (can be positive or negative)
PATCH {{url}}/inventories/{{inventoriesId}}/stock
Authorization: Bearer {{storeToken}}
Content-Type: application/json

{
  "quantity_change": -3,
  "action": "adjustment",
  "notes": "Stock count discrepancy correction"
}

### 11. Record expired items
PATCH {{url}}/inventories/{{inventoriesId}}/stock
Authorization: Bearer {{storeToken}}
Content-Type: application/json

{
  "quantity_change": 5,
  "action": "expired",
  "notes": "Expired items removed from shelf"
}

### 12. Record damaged items
PATCH {{url}}/inventories/{{inventoriesId}}/stock
Authorization: Bearer {{storeToken}}
Content-Type: application/json

{
  "quantity_change": 2,
  "action": "damaged",
  "notes": "Items damaged during transport"
}

### ===================== STOCK RESERVATIONS =====================

### 13. Reserve stock for order
POST {{url}}/inventories/{{productId}}/reserve
Authorization: Bearer {{storeToken}}
Content-Type: application/json

{
  "quantity": 5,
  "order_id": "ORD-001",
  "notes": "Reserved for customer order"
}

### 14. Release reserved stock (if order cancelled)
POST {{url}}/inventories/{{productId}}/release
Authorization: Bearer {{storeToken}}
Content-Type: application/json

{
  "quantity": 2,
  "order_id": "ORD-001",
  "notes": "Order partially cancelled"
}

### 15. Confirm sale from reserved stock
POST {{url}}/inventories/{{productId}}/confirm-sale
Authorization: Bearer {{storeToken}}
Content-Type: application/json

{
  "quantity": 3,
  "order_id": "ORD-001",
  "notes": "Order confirmed and shipped"
}

### ===================== inventories ANALYTICS =====================

### 16. Get inventories statistics for store
GET {{url}}/inventories/stats?storeId={{storeId}}
Authorization: Bearer {{storeToken}}

### 17. Get overall inventories statistics (Admin)
GET {{url}}/inventories/stats
Authorization: Bearer {{adminToken}}

### 18. Get inventories value report
GET {{url}}/inventories/value-report?storeId={{storeId}}
Authorization: Bearer {{storeToken}}

### 19. Get stock movement history
GET {{url}}/inventories/{{inventoriesId}}/history
Authorization: Bearer {{storeToken}}

### 20. Get reorder suggestions
GET {{url}}/inventories/reorder-suggestions?storeId={{storeId}}
Authorization: Bearer {{storeToken}}

### ===================== BULK inventories OPERATIONS =====================

### 21. Bulk stock update
PATCH {{url}}/inventories/bulk/stock
Authorization: Bearer {{storeToken}}
Content-Type: application/json

{
  "store_id": {{storeId}},
  "updates": [
    {
      "product_id": 1,
      "quantity_change": 20,
      "action": "restock"
    },
    {
      "product_id": 2,
      "quantity_change": 15,
      "action": "restock"
    }
  ],
  "notes": "Bulk weekly restock"
}

### 22. Bulk price update
PATCH {{url}}/inventories/bulk/cost-price
Authorization: Bearer {{storeToken}}
Content-Type: application/json

{
  "store_id": {{storeId}},
  "cost_price_updates": [
    {
      "product_id": 1,
      "cost_price": 95.00
    },
    {
      "product_id": 2,
      "cost_price": 85.00
    }
  ]
}

### ===================== inventories ALERTS =====================

### 23. Get low stock alerts
GET {{url}}/inventories/alerts/low-stock?storeId={{storeId}}
Authorization: Bearer {{storeToken}}

### 24. Get expiring products alert
GET {{url}}/inventories/alerts/expiring?storeId={{storeId}}&days=7
Authorization: Bearer {{storeToken}}

### 25. Mark alert as read
PATCH {{url}}/inventories/alerts/{{inventoriesId}}/read
Authorization: Bearer {{storeToken}}

### 26. Delete inventories record
DELETE {{url}}/inventories/{{inventoriesId}}
Authorization: Bearer {{storeToken}}